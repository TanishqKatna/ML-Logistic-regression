import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
def sigmoid_function(x):
    return 1 / (1 + np.exp(-x))
def initialize_parameters(num_features):
    return np.zeros(num_features), 0
def compute_binary_crossentropy(y_actual, y_predicted):
    y_predicted = np.clip(y_predicted, 1e-10, 1 - 1e-10)
    m = len(y_actual)
    loss = -np.mean(y_actual * np.log(y_predicted) + (1 - y_actual) * np.log(1 - y_predicted))
    return loss
def update_parameters(X, y, weights, bias, learning_rate):
    m = X.shape[0]
    predictions = sigmoid_function(np.dot(X, weights) + bias)
    gradient_weights = (1 / m) * np.dot(X.T, (predictions - y))
    gradient_bias = (1 / m) * np.sum(predictions - y)
    weights -= learning_rate * gradient_weights
    bias -= learning_rate * gradient_bias
    return weights, bias
def train_model(X, y, learning_rate=0.001, iterations=1000):
    num_features = X.shape[1]
    weights, bias = initialize_parameters(num_features)
    for iteration in range(iterations):
        weights, bias = update_parameters(X, y, weights, bias, learning_rate)
        if iteration % 100 == 0:
            y_predicted = sigmoid_function(np.dot(X, weights) + bias)
            loss = compute_binary_crossentropy(y, y_predicted)
            print(f"Iteration {iteration}: Loss = {loss}")
    return weights, bias
def make_predictions(X, weights, bias, decision_boundary=0.5):
    probabilities = sigmoid_function(np.dot(X, weights) + bias)
    return (probabilities >= decision_boundary).astype(int)
if __name__ == "__main__":
    dataset = load_breast_cancer()
    X, y = dataset.data, dataset.target
    X = (X - np.mean(X, axis=0)) / np.std(X, axis=0)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    trained_weights, trained_bias = train_model(X_train, y_train, learning_rate=0.001, iterations=1000)
    test_predictions = make_predictions(X_test, trained_weights, trained_bias)
    model_accuracy = accuracy_score(y_test, test_predictions)
    print("Model Accuracy on Test Data:", model_accuracy)
